{"name":"Spring Portlet Example","tagline":"","body":"This repository contains a simple spring portlet. It is intended as a step by step tutorial. \r\n\r\n1. Create a new maven web application project. Maven archetype can be used to generate the application (e.g. com.liferay.maven.archetypes:liferay-portlet-archetype). ```mvn archetype:generate```\r\n2. Add dependencies on Spring into pom.xml.\r\n \r\n  ```\r\n  <dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-webmvc-portlet</artifactId>\r\n    <version>3.2.6.RELEASE</version>\r\n  </dependency>\r\n ```\r\n3. Insert spring initalization code inot web.xml.\r\n * Insert spring context listener\r\n   \r\n  ```\r\n      <listener>\r\n          <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\r\n      </listener>\r\n   ```\r\n * Specify the application spring configuration file location\r\n   \r\n  ```\r\n      <context-param>\r\n          <param-name>contextConfigLocation</param-name>\r\n          <param-value>/WEB-INF/spring-context/portlet-application-context.xml</param-value>\r\n      </context-param>\r\n   ```\r\n * Add servlet for view processing\r\n   \r\n  ```\r\n      <servlet>\r\n          <servlet-name>ViewRendererServlet</servlet-name>\r\n          <servlet-class>org.springframework.web.servlet.ViewRendererServlet</servlet-class>\r\n          <load-on-startup>1</load-on-startup>\r\n      </servlet>\r\n  \r\n      <servlet-mapping>\r\n          <servlet-name>ViewRendererServlet</servlet-name>\r\n          <url-pattern>/WEB-INF/servlet/view</url-pattern>\r\n      </servlet-mapping>\r\n   ```\r\n4. Create the application configuration file *portlet-application-context.xml*.\r\n5. Activate annotation and configure view resolver in main context file.\r\n  \r\n  ```\r\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n  <beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xmlns:aop=\"http://www.springframework.org/schema/aop\"\r\n         xmlns:context=\"http://www.springframework.org/schema/context\"\r\n         xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\r\n         xsi:schemaLocation=\"\r\n         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\r\n         http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd\r\n         http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\r\n         http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd\">\r\n  \r\n      <!--Enables @Autowired annotation-->\r\n      <context:annotation-config/>\r\n  \r\n      <!-- Spring MVC VIEW Configuration -->\r\n      <bean id=\"viewResolver\" class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\r\n          <property name=\"viewClass\" value=\"org.springframework.web.servlet.view.JstlView\"/>\r\n          <property name=\"contentType\" value=\"text/html;charset=UTF-8\" />\r\n          <property name=\"prefix\" value=\"/WEB-INF/jsp/\" />\r\n          <property name=\"suffix\" value=\".jsp\" />\r\n      </bean>\r\n  </beans>\r\n  ```\r\n6. Define spring portlet\r\n * Define portlet in portlet.xml\r\n   \r\n  ```\r\n    <portlet>\r\n        <portlet-name>BasicSpringPortlet</portlet-name>\r\n        <portlet-class>org.springframework.web.portlet.DispatcherPortlet</portlet-class>\r\n        <init-param>\r\n            <name>contextConfigLocation</name>\r\n            <value>/WEB-INF/spring-context/portlet/basic-spring-portlet.xml</value>\r\n        </init-param>\r\n        <supports>\r\n            <mime-type>text/html</mime-type>\r\n            <portlet-mode>VIEW</portlet-mode>\r\n        </supports>\r\n        <supported-locale>en</supported-locale>\r\n        <supported-locale>cs</supported-locale>\r\n        <resource-bundle>content.basic-spring-portlet</resource-bundle>\r\n    </portlet>\r\n   ```\r\n * Configure portlet in liferay-portlet.xml\r\n   \r\n  ```\r\n    <portlet>\r\n        <portlet-name>BasicSpringPortlet</portlet-name>\r\n        <instanceable>false</instanceable>\r\n        <header-portlet-css>/css/main.css</header-portlet-css>\r\n        <header-portlet-javascript>/js/main.js</header-portlet-javascript>\r\n    </portlet>\r\n   ```\r\n * Configure portlet in liferay-display.xml\r\n  \r\n   ```\r\n  \t<category name=\"category.sample\">\r\n          <portlet id=\"BasicSpringPortlet\" />\r\n  \t</category>\r\n   ```\r\n * Create portlet spring context file\r\n  \r\n   ```\r\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n    <!--suppress SpringFacetInspection -->\r\n    <beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n           xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\">\r\n    \r\n        <!-- Spring MVC Message Source -->\r\n        <bean id=\"messageSource\" class=\"org.springframework.context.support.ResourceBundleMessageSource\">\r\n            <property name=\"useCodeAsDefaultMessage\" value=\"true\"/>\r\n            <property name=\"basenames\">\r\n                <list>\r\n                    <value>content.basic-spring-portlet</value>\r\n                </list>\r\n            </property>\r\n        </bean>\r\n    \r\n    </beans>\r\n   ```\r\n * Create resource bundles\r\n7. Create Spring Controller\r\n  \r\n  ```java\r\n  package eu.ibacz.sample.portlet.bascispring;\r\n  \r\n  import org.springframework.stereotype.Controller;\r\n  import org.springframework.web.bind.annotation.RequestMapping;\r\n  import org.springframework.web.portlet.bind.annotation.RenderMapping;\r\n  \r\n  /**\r\n   * This class is base controller for VIEW mode.\r\n   */\r\n  @Controller\r\n  @RequestMapping(\"VIEW\")\r\n  public class BasicSpringPortletViewController {\r\n  \r\n  \r\n      @RenderMapping\r\n      public String doView() {\r\n          return BasicSpringPortletConstants.MAIN_VIEW;\r\n      }\r\n  \r\n  \r\n  }\r\n  ```\r\n8. Create view - *view.jsp*  \r\n9. Add component scan to spring portlet configuration.\r\n\r\n  ```\r\n   <context:component-scan base-package=\"eu.ibacz.sample.portlet.bascispring.**\"/>\r\n  ```\r\n10. Add a simple form to jsp file.\r\n\r\n ```jsp\r\n <%@ page import=\"eu.ibacz.sample.portlet.bascispring.BasicSpringPortletConstants\" %>\r\n <%@page contentType=\"text/html\" pageEncoding=\"UTF-8\"%>\r\n \r\n <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\r\n \r\n <%@ taglib prefix=\"portlet\" uri=\"http://java.sun.com/portlet_2_0\" %>\r\n \r\n <%@ taglib prefix=\"spring\" uri=\"http://www.springframework.org/tags\" %>\r\n <%@ taglib prefix=\"form\" uri=\"http://www.springframework.org/tags/form\"%>\r\n \r\n <c:set var=\"ns\"><portlet:namespace/></c:set>\r\n \r\n <spring:message code=\"basicspring-question\"/>\r\n <br/>\r\n <portlet:actionURL var=\"actionUrl\" name=\"<%=BasicSpringPortletConstants.TEST_ACTION%>\"/>\r\n <form action=\"${actionUrl}\" method=\"POST\">\r\n     <input type=\"text\" name=\"${ns}<%=BasicSpringPortletConstants.NAME_PARAM%>\">\r\n     <input type=\"submit\" value=\"<spring:message code=\"basicspring-submit\"/>\" />\r\n </form>\r\n ```\r\n11. Handle the form data in controler.\r\n\r\n ```java\r\n     @ActionMapping(BasicSpringPortletConstants.TEST_ACTION)\r\n     public void doAction(@RequestParam(BasicSpringPortletConstants.NAME_PARAM) String name) {\r\n         LOG.warn(\"I've got name \" + name);\r\n     }\r\n \r\n ```\r\n12. Add a greetings view.\r\n * Add additional render method to the controller\r\n  ```java\r\n    @RenderMapping(params = PARAM_VIEW + \"=\" + GREETING)\r\n    public String greeting(\r\n            @RequestParam(NAME_PARAM) String name,\r\n            Model model) {\r\n        model.addAttribute(NAME_PARAM,name);\r\n        return GREETING_VIEW;\r\n    }\r\n\r\n    @ActionMapping(TEST_ACTION)\r\n    public void doAction(ActionRequest request, ActionResponse response) {\r\n        LOG.warn(\"Processing name.\");\r\n\r\n        //order if these lines is important!\r\n        response.setRenderParameters(request.getParameterMap());\r\n        response.setRenderParameter(PARAM_VIEW, GREETING);\r\n    }\r\n  ```\r\n * Add *greetings.jsp*\r\n\r\n  ```\r\n   <%@page contentType=\"text/html\" pageEncoding=\"UTF-8\" %>\r\n   <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\r\n   <%@ taglib prefix=\"portlet\" uri=\"http://java.sun.com/portlet_2_0\" %>\r\n   \r\n   <%@ taglib prefix=\"spring\" uri=\"http://www.springframework.org/tags\" %>\r\n   \r\n   \r\n   <spring:message code=\"basicspring-greeting\"/>&nbsp;<b><c:out value=\"${name}\"/></b>!!!\r\n   <br/>\r\n   <a href=\"<portlet:renderURL />\"><spring:message code=\"basicspring-back\"/> </a>\r\n  ```\r\n13. Create transfer object *PersonPto*\r\n\r\n ```java\r\n   public class PersonPto {\r\n      private String name;\r\n      private DateTime dateOfBirth;\r\n  \r\n      public DateTime getDateOfBirth() {\r\n          return dateOfBirth;\r\n      }\r\n  \r\n      public void setDateOfBirth(DateTime dateOfBirth) {\r\n          this.dateOfBirth = dateOfBirth;\r\n      }\r\n  \r\n      public String getName() {\r\n          return name;\r\n      }\r\n  \r\n      public void setName(String name) {\r\n          this.name = name;\r\n      }\r\n  \r\n      @Override\r\n      public String toString() {\r\n          return \"PersonPto{\" +\r\n                  \"dateOfBirth=\" + dateOfBirth +\r\n                  \", name='\" + name + '\\'' +\r\n                  \"} \" + super.toString();\r\n      }\r\n  }\r\n ```\r\n13. Switch from parameters to model attribute.\r\n\r\n ```java\r\n @ActionMapping(TEST_ACTION)\r\n    public void doAction(\r\n            @ModelAttribute(PERSON_PTO) PersonPto personPto,\r\n            BindingResult result,\r\n            ActionResponse response) {\r\n        LOG.warn(\"Processing person \" + personPto);\r\n\r\n        response.setRenderParameter(PARAM_VIEW, GREETING);\r\n    }\r\n ```\r\n14. Register InitBinder for joda time.\r\n\r\n ```java\r\n     @InitBinder\r\n    public void initBinder(WebDataBinder binder) {\r\n        binder.registerCustomEditor(DateTime.class, new JodaDateEditor(DATE_TIME_PATTERN));\r\n    }\r\n ```\r\n15. Change the simple form to spring form.\r\n\r\n ```jsp\r\n <portlet:actionURL var=\"actionUrl\" name=\"<%=TEST_ACTION%>\"/>\r\n<form:form action=\"${actionUrl}\" method=\"POST\" modelAttribute=\"<%=PERSON_PTO%>\">\r\n    <p>\r\n        <form:label path=\"name\" for=\"${ns}name\"><spring:message code=\"basicspring-form-name\"/></form:label>\r\n        <form:input path=\"name\" id=\"${ns}name\"/>\r\n    </p>\r\n    <p>\r\n        <form:label path=\"dateOfBirth\" for=\"${ns}dateOfBirth\"><spring:message code=\"basicspring-form-date-of-birth\"/></form:label>\r\n        <form:input path=\"dateOfBirth\" id=\"${ns}dateOfBirth\"/>\r\n    </p>\r\n\r\n    <input type=\"submit\" value=\"<spring:message code=\"basicspring-submit\"/>\" />\r\n</form:form>\r\n\r\n ```\r\n16. Calculate days till birthday.\r\n\r\n ```jsp\r\n     private Integer daysToBirthday(DateTime dateOfBirth) {\r\n        DateTime now = (new DateTime()).withTimeAtStartOfDay();\r\n        int year = now.getYear();\r\n        DateTime birthday = dateOfBirth.withYear(year);\r\n        if (birthday.isBeforeNow()) {\r\n            birthday = birthday.plusYears(1);\r\n        }\r\n        return Days.daysBetween(now, birthday).getDays();\r\n    }\r\n ```\r\n17. Add validation\r\n * Create Validator\r\n \r\n ```java\r\n   @Component\r\n  public class PersonPtoValidator implements Validator {\r\n      private static final DateTime minDate = DateTime.now().minusYears(130);\r\n      private static final DateTime maxDate = DateTime.now().plusYears(130);\r\n  \r\n      @Override\r\n      public boolean supports(Class<?> clazz) {\r\n          return PersonPtoValidator.class.isAssignableFrom(clazz);\r\n      }\r\n  \r\n      @Override\r\n      public void validate(Object target, Errors errors) {\r\n          ValidationUtils.rejectIfEmptyOrWhitespace(errors, \"name\", \"basicspring-err-null-value\");\r\n          ValidationUtils.rejectIfEmptyOrWhitespace(errors, \"dateOfBirth\", \"basicspring-err-null-value\");\r\n          if (!errors.hasErrors()) {\r\n              PersonPto personPto = (PersonPto) target;\r\n              if (personPto.getDateOfBirth().isBefore(minDate)) {\r\n                  errors.rejectValue(\"dateOfBirth\", \"basicspring-err-to-early\");\r\n              }\r\n              if (personPto.getDateOfBirth().isAfter(maxDate)) {\r\n                  errors.rejectValue(\"dateOfBirth\", \"basicspring-err-to-late\");\r\n              }\r\n          }\r\n      }\r\n  }\r\n\r\n ```\r\n * Use validator in action.\r\n \r\n ```java\r\n        personPtoValidator.validate(personPto,result);\r\n        if (!result.hasErrors()) {\r\n            response.setRenderParameter(PARAM_VIEW, GREETING);\r\n        }\r\n ```\r\n * Add validation error message placeholders.\r\n \r\n ```jsp\r\n  <form:errors path=\"name\"  element=\"span\" cssClass=\"${errorClass}\"/>\r\n ```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}